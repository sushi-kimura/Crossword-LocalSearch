このメモは技術上のメモである。

＊fortranをcで呼ぶ方法
１：fortran subroutineを作成する
例えば、引数aとbを加算するプログラムを作成する。
ファイル名は仮に sub.f90 とする：
[sub.f90]----------------
  subroutine addab(a, b)
      integer a, b
      a = a + b
      b = a + b
      return
  end subroutine addab
-------------------------
この場合、aもbもa+bになる。

２：Cプログラムで関数を宣言する
Cでグローバルな宣言部に先ほどのsubroutineをグローバル関数として宣言する。
ただし、subroutine名「XXX()」に対して、宣言時の関数名は「XXX_()」となる。
また、引数a,bはポインタで書く。
先ほどの例を踏襲して書くと：
[common.h]----------------------------
  extern void addab_(int *a, int *b);
--------------------------------------
もしヘッダファイルがあるならば、そこに書くと体裁が整う(common.hなどにまとめる)。

３：Cプログラムで関数を呼ぶ
あとはお好みの場所で宣言した関数を呼んで実行する。
ただし、引数には変数のアドレスを渡す：
[common.c]----------------
  int a=1, b=2;
  addab_(&a, &b);
  printf("a+b = %d", a);
--------------------------
これでa,bにはa+bの値が格納される。

４：コンパイルする
fortranプログラムとCプログラムを混在させる場合、
メインプログラムがどちらかに関わらず、コンパイルはfortranコンパイラを使う。
今回の場合は、CコンパイラでCプログラムのオブジェクトファイルを作成し、
最後にfortranコンパイラでfortranプログラムとリンクする。
また、fortranコンパイラとCコンパイラはコンパイラによって対応するコンパイラがそれぞれ異なるため、
コンパイラの発行元で確認することが望ましい。
ここでは、fortranコンパイラにはgfortranを、Cコンパイラにはgccを用いる：
  gcc -c common.c
  gfortran sub.f90 common.o
  ./a.out
特に指定しなければ実行ファイル名は[a.out]である。
実行ファイル名を指定する場合は、コンパイルオプション「-o」で指定する。
  gfortran -o test.exe sub.f90 common.o
  ./test.exe
fortranについては、NAGによるサイトが参考になる。
